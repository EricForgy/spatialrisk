haversine <- function(lat_from, lon_from, lat_to, lon_to){
if( lat_from > 90 | lat_to > 90) warning('latitude > 90')
if( lon_from > 360 | lon_to > 360) warning('longitude > 360')
toRad <- pi / 180
lat_to <- lat_to * toRad
lat_from <- lat_from * toRad
lon_to <- lon_to * toRad
lon_from <- lon_from * toRad
dLat <- (lat_to - lat_from)
dLon <- (lon_to - lon_from)
a <- (sin(dLat / 2) ^ 2) + (cos(lat_from) * cos(lat_to)) * (sin(dLon / 2) ^ 2)
dist <- 2 * atan2(sqrt(a), sqrt(1 - a)) * 6378137
return(dist)
}
?geosphere::distHaversine
devtools::document()
?spatialrisk::haversine()
devtools::document()
40075/360
block_around_point <- function(lon_center, lat_center, radius = 200){
# Absolute bearing (i.e. angle away (clockwise) from North)
north <- 0
east <- 90
south <- 180
west <- 270
return(geosphere::destPoint(c(lon_center, lat_center), c(north, east, south, west), radius))
}
block_around_point <- function(lon_center, lat_center, radius = 200){
north <- 0
east <- 90
south <- 180
west <- 270
return(geosphere::destPoint(c(lon_center, lat_center), c(north, east, south, west), radius))
}
block_around_point(6.520386, 53.24007)
53.24007 + (200 / 111.32 * 10^3)
53.24007 + (200 / (111.32 * 10^3))
53.24007 - (200 / (111.32 * 10^3))
block_around_point(6.520386, 53.24007)[1,2]
block_around_point(6.520386, 53.24007)
53.24007 - (200 / (111.32 * 10^3))
53.24007 - (200 / (111.32 * 10^3))
block_around_point(6.520386, 53.24007, 2000)
53.24007 - (2000 / (111.32 * 10^3))
53.24007 - (2000 / (111.32 * 10^3))
one_lat_in_meters <- 111.31*10^3
one_lat_in_meters
one_lat_in_meters <- 111310
south <- 53.24007 - (2000 / one_lat_in_meters)
north <- 53.24007 + (2000 / one_lat_in_meters)
south
north
circumference_earth_meters <- 40075000
one_lat_in_meters <- 111310
circumference_earth_in_meters <- 40075000
circumference_earth_in_km <- 40075
south
south_lat <- 53.24007 - (2000 / one_lat_in_meters)
north_lat <- 53.24007 + (2000 / one_lat_in_meters)
40075 * cos(53.24007) / 360
53.24007 + 2000 / (40075 * cos(53.24007) / 360)
6.520386 + 2000 / (40075 * cos(53.24007) / 360)
one_lat_in_meters <- 111310
circumference_earth_in_km <- 40075
south_lat <- 53.24007 - (2000 / one_lat_in_meters)
north_lat <- 53.24007 + (2000 / one_lat_in_meters)
south_lat
block_around_point(6.520386, 53.24007, 2000)
(40075 * cos(53.24007) / 360)
6.520386 + 2000 / (40075000 * cos(53.24007) / 360)
6.520386 + 2000 / (40075000 * cos(53.24007 * pi / 180) / 360)
block_around_point(6.520386, 53.24007, 200)
6.520386 + 2000 / (40075000 * cos(53.24007 * pi / 180) / 360)
6.520386 + 200 / (40075000 * cos(53.24007 * pi / 180) / 360)
6.520386 - 200 / (40075000 * cos(53.24007 * pi / 180) / 360)
6.520386 - 200 / (40075000 * cos(53.24007 * toRad) / 360)
toRad <- pi / 180
6.520386 - 200 / (40075000 * cos(53.24007 * toRad) / 360)
block_around_point <- function(lon_center, lat_center, radius = 200){
north <- 0
east <- 90
south <- 180
west <- 270
return(geosphere::destPoint(c(lon_center, lat_center), c(north, east, south, west), radius))
}
block_around_point1 <- function(lon_center, lat_center, radius = 200){
one_lat_in_meters <- 111310
circumference_earth_in_km <- 40075
toRad <- pi / 180
south_lat <- lat_center - (radius / one_lat_in_meters)
north_lat <- lat_center + (radius / one_lat_in_meters)
west_lon <- lon_center - radius / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
eest_lon <- lon_center + radius / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
return(south_lat, north_lat, west_lat, east_lat)
}
block_around_point(6.520386, 53.24007, 200)
block_around_point1(6.520386, 53.24007, 200)
block_around_point1 <- function(lon_center, lat_center, radius = 200){
one_lat_in_meters <- 111310
circumference_earth_in_km <- 40075
toRad <- pi / 180
south_lat <- lat_center - (radius / one_lat_in_meters)
north_lat <- lat_center + (radius / one_lat_in_meters)
west_lon <- lon_center - radius / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
eest_lon <- lon_center + radius / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
return(c(south_lat, north_lat, west_lat, east_lat))
}
block_around_point(6.520386, 53.24007, 200)
block_around_point1(6.520386, 53.24007, 200)
block_around_point1 <- function(lon_center, lat_center, radius = 200){
one_lat_in_meters <- 111310
circumference_earth_in_km <- 40075
toRad <- pi / 180
south_lat <- lat_center - (radius / one_lat_in_meters)
north_lat <- lat_center + (radius / one_lat_in_meters)
west_lon <- lon_center - radius / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
eest_lon <- lon_center + radius / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
return(c(south_lat, north_lat, west_lon, east_lon))
}
block_around_point(6.520386, 53.24007, 200)
block_around_point1(6.520386, 53.24007, 200)
block_around_point1 <- function(lon_center, lat_center, radius = 200){
one_lat_in_meters <- 111310
circumference_earth_in_km <- 40075
toRad <- pi / 180
south_lat <- lat_center - (radius / one_lat_in_meters)
north_lat <- lat_center + (radius / one_lat_in_meters)
west_lon <- lon_center - radius / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
east_lon <- lon_center + radius / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
return(c(south_lat, north_lat, west_lon, east_lon))
}
block_around_point(6.520386, 53.24007, 200)
block_around_point1(6.520386, 53.24007, 200)
block_around_point1 <- function(lon_center, lat_center, radius = 200){
one_lat_in_meters <- 111310
circumference_earth_in_km <- 40075000
toRad <- pi / 180
south_lat <- lat_center - (radius / one_lat_in_meters)
north_lat <- lat_center + (radius / one_lat_in_meters)
west_lon <- lon_center - radius / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
east_lon <- lon_center + radius / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
return(c(south_lat, north_lat, west_lon, east_lon))
}
block_around_point(6.520386, 53.24007, 200)
block_around_point1(6.520386, 53.24007, 200)
block_around_point1 <- function(lon_center, lat_center, radius = 200){
one_lat_in_meters <- 111310
circumference_earth_in_km <- 40075000
toRad <- pi / 180
buffer <- radius + 5
south_lat <- lat_center - (buffer / one_lat_in_meters)
north_lat <- lat_center + (buffer / one_lat_in_meters)
west_lon <- lon_center - buffer / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
east_lon <- lon_center + buffer / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
return(c(south_lat, north_lat, west_lon, east_lon))
}
block_around_point(6.520386, 53.24007, 200)
block_around_point1(6.520386, 53.24007, 200)
mbm <- microbenchmark::microbenchmark(
m1 = block_around_point(6.520386, 53.24007, 200),
m2 = block_around_point1(6.520386, 53.24007, 200)
)
mbm
mbm <- microbenchmark::microbenchmark(
m1 = block_around_point(6.520386, 53.24007, 2000),
m2 = block_around_point1(6.520386, 53.24007, 2000)
)
mbm
block_around_point(6.520386, 53.24007, 2000),
block_around_point1(6.520386, 53.24007, 2000)
block_around_point(6.520386, 53.24007, 2000),
block_around_point1(6.520386, 53.24007, 2000)
block_around_point(6.520386, 53.24007, 2000)
block_around_point1(6.520386, 53.24007, 2000)
#' @param lon_center Longitude of center point, in degrees.
#' @param lat_center Latitude of center point, in degrees.
#' @param radius Major (equatorial) radius (default is meters) of the ellipsoid. The default value is for WGS84.
#'
#' @return A data.frame consisting of the four coordinates (long,lat) obtained by walking the radius to the four cardinal directions.
#' @importFrom geosphere "destPoint"
#'
#' @examples
#' block_around_point(lon_center = 6.520386, lat_center = 53.24007, radius = 200)
#' @export block_around_point
block_around_point <- function(lon_center, lat_center, radius = 200){
one_lat_in_meters <- 111310
circumference_earth_in_km <- 40075000
toRad <- pi / 180
buffer <- radius + 0
south_lat <- lat_center - (buffer / one_lat_in_meters)
north_lat <- lat_center + (buffer / one_lat_in_meters)
west_lon <- lon_center - buffer / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
east_lon <- lon_center + buffer / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
return(c(south_lat, north_lat, west_lon, east_lon))
}
block_around_point <- function(lon_center, lat_center, radius = 200){
north <- 0
east <- 90
south <- 180
west <- 270
return(geosphere::destPoint(c(lon_center, lat_center), c(north, east, south, west), radius))
}
block_around_point1 <- function(lon_center, lat_center, radius = 200){
one_lat_in_meters <- 111310
circumference_earth_in_km <- 40075000
toRad <- pi / 180
buffer <- radius + 5
south_lat <- lat_center - (buffer / one_lat_in_meters)
north_lat <- lat_center + (buffer / one_lat_in_meters)
west_lon <- lon_center - buffer / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
east_lon <- lon_center + buffer / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
return(c(south_lat, north_lat, west_lon, east_lon))
}
block_around_point(6.520386, 53.24007, 2000)
block_around_point1(6.520386, 53.24007, 2000)
block_around_point1 <- function(lon_center, lat_center, radius = 200){
one_lat_in_meters <- 111310
circumference_earth_in_km <- 40075000
toRad <- pi / 180
buffer <- radius + 0
south_lat <- lat_center - (buffer / one_lat_in_meters)
north_lat <- lat_center + (buffer / one_lat_in_meters)
west_lon <- lon_center - buffer / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
east_lon <- lon_center + buffer / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
return(c(south_lat, north_lat, west_lon, east_lon))
}
block_around_point(6.520386, 53.24007, 2000)
block_around_point1(6.520386, 53.24007, 2000)
block_around_point(6.520386, 53.24007, 200)
block_around_point1(6.520386, 53.24007, 200)
devtools::document()
circumference_earth_in_km <- 40075000
circumference_earth_meters
circumference_earth_meters / 360
block_around_point1 <- function(lon_center, lat_center, radius = 200){
one_lat_in_meters <- 111310
circumference_earth_in_km <- 40075000
toRad <- pi / 180
buffer <- radius + 0
south_lat <- lat_center - (buffer / one_lat_in_meters)
north_lat <- lat_center + (buffer / one_lat_in_meters)
west_lon <- lon_center - buffer / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
east_lon <- lon_center + buffer / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
return(c(south_lat, north_lat, west_lon, east_lon))
}
block_around_point1(6.520386, 53.24007, 200)
block_around_point(6.520386, 53.24007, 200)
block_around_point1 <- function(lon_center, lat_center, radius = 200){
circumference_earth_in_km <- 40075000
#one_lat_in_meters <- 111310
one_lat_in_meters <- circumference_earth_in_km / 360
toRad <- pi / 180
buffer <- radius + 0
south_lat <- lat_center - (buffer / one_lat_in_meters)
north_lat <- lat_center + (buffer / one_lat_in_meters)
west_lon <- lon_center - buffer / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
east_lon <- lon_center + buffer / (circumference_earth_in_km * cos(lat_center * toRad) / 360)
return(c(south_lat, north_lat, west_lon, east_lon))
}
block_around_point(6.520386, 53.24007, 200)
block_around_point1(6.520386, 53.24007, 200)
circumference_earth_in_meters / 360
devtools::document()
block_around_point <- function(lon_center, lat_center, radius = 200){
circumference_earth_in_meters <- 40075000
toRad <- pi / 180
buffer <- radius + 1
one_lat_in_meters <- circumference_earth_in_meters / 360
one_lon_in_meters <- circumference_earth_in_meters * cos(lat_center * toRad) / 360
south_lat <- lat_center - buffer / one_lat_in_meters
north_lat <- lat_center + buffer / one_lat_in_meters
west_lon <- lon_center - buffer / one_lon_in_meters
east_lon <- lon_center + buffer / one_lon_in_meters
return(c(south_lat, north_lat, west_lon, east_lon))
}
block_around_point(6.520386, 53.24007, 200)
concentration(Groningen[1:10, ], amount, radius = 1000)
library(data.table)
concentration(Groningen[1:10, ], amount, radius = 1000)
concentration(Groningen[1:10, ], amount, radius = 1000)
devtools::load_all(".")
library(spatialrisk)
concentration(Groningen[1:10, ], amount, radius = 1000)
#' @param value Column name
#' @param radius Radius (in meters)
#'
#' @return value
#' @import data.table
#'
#' @examples
#' concentration(Groningen[1:10, ], amount, radius = 1000)
#'
#' @export
concentration <- function(data, value, radius = 200){
dt <- data.table(data)
value <- deparse(substitute(value))
setnames(dt, value, "value")
concentration <- dt[, concentration := sum_in_circle(dt, value = value, lon_center = lon, lat_center = lat, radius = radius),
by = 1:nrow(dt)][order(-concentration)]
setnames(concentration, value, value)
return(concentration)
}
concentration(Groningen[1:10, ], amount, radius = 1000)
#' @param value Column name
#' @param radius Radius (in meters)
#'
#' @return value
#' @import data.table
#'
#' @examples
#' concentration(Groningen[1:10, ], amount, radius = 1000)
#'
#' @export
concentration <- function(data, value, radius = 200){
dt <- data.table(data)
value <- deparse(substitute(value))
setnames(dt, value, "value")
concentration <- dt[, concentration := sum_in_circle(dt, value = value, lon_center = lon, lat_center = lat, radius = radius),
by = 1:nrow(dt)][order(-concentration)]
setnames(concentration, "value", value)
return(concentration)
}
concentration(Groningen[1:10, ], amount, radius = 1000)
#' @param value Column name
#' @param radius Radius (in meters)
#'
#' @return value
#' @import data.table
#'
#' @examples
#' concentration(Groningen[1:10, ], amount, radius = 1000)
#'
#' @export
concentration <- function(data, value, radius = 200){
dt <- data.table(data)
value <- deparse(substitute(value))
setnames(dt, value, "value")
concentration <- dt[, concentration := sum_in_circle(dt, value = value, lon_center = lon, lat_center = lat, radius = radius),
by = 1:nrow(dt)][order(-concentration)]
setnames(concentration, "value", value)
return(concentration)
}
concentration(Groningen[1:10, ], amount, radius = 1000)
concentration(Groningen[1:10, ], number, radius = 1000)
#' @param value Column name
#' @param radius Radius (in meters)
#'
#' @return value
#' @import data.table
#'
#' @examples
#' concentration(Groningen[1:10, ], amount, radius = 1000)
#'
#' @export
concentration <- function(data, value, radius = 200){
dt <- data.table(data)
value <- deparse(substitute(value))
setnames(dt, value, "value")
concentration <- dt[, concentration := sum_in_circle(dt, value = value, lon_center = lon, lat_center = lat, radius = radius),
by = 1:nrow(dt)][order(-concentration)]
#setnames(concentration, "value", value)
return(concentration)
}
concentration(Groningen[1:10, ], number, radius = 1000)
concentration(Groningen[1:10, ], amount, radius = 1000)
Groningen[1:10, ]
#' @param value Column name
#' @param radius Radius (in meters)
#'
#' @return value
#' @import data.table
#'
#' @examples
#' concentration(Groningen[1:10, ], amount, radius = 1000)
#'
#' @export
concentration <- function(data, value, radius = 200){
dt <- data.table(data)
value <- deparse(substitute(value))
setnames(dt, value, "value")
concentration <- dt[, concentration := sum_in_circle(dt, value = value, lon_center = lon, lat_center = lat, radius = radius),
by = 1:nrow(dt)][order(-concentration)]
#setnames(concentration, "value", value)
return(concentration)
}
concentration(Groningen[1:10, ], amount, radius = 1000)
#' @param value Column name
#' @param radius Radius (in meters)
#'
#' @return value
#' @import data.table
#'
#' @examples
#' concentration(Groningen[1:10, ], amount, radius = 1000)
#'
#' @export
concentration <- function(data, value, radius = 200){
dt <- data.table(data)
value <- deparse(substitute(value))
setnames(dt, value, "value")
concentration <- dt[, concentration := sum_in_circle(dt, value = value, lon_center = lon, lat_center = lat, radius = radius),
by = 1:nrow(dt)][order(-concentration)]
return(concentration)
}
concentration(Groningen[1:10, ], amount, radius = 1000)
concentration <- function(data, value, radius = 200){
dt <- data.table(data)
value <- deparse(substitute(value))
setnames(dt, value, "value")
concentration <- dt[, concentration := sum_in_circle(dt, value = value, lon_center = lon, lat_center = lat, radius = radius),
by = 1:nrow(dt)][order(-concentration)]
return(concentration)
}
concentration(Groningen[1:10, ], amount, radius = 1000)
concentration(Groningen[1:10, ], value, radius = 1000)
#' @param value Column name
#' @param radius Radius (in meters)
#'
#' @return value
#' @import data.table
#'
#' @examples
#' concentration(Groningen[1:10, ], amount, radius = 1000)
#'
#' @export
concentration <- function(data, value, radius = 200){
dt <- data.table(data)
value <- deparse(substitute(value))
setnames(dt, value, "value")
concentration <- dt[, concentration := sum_in_circle(dt, value = value, lon_center = lon, lat_center = lat, radius = radius),
by = 1:nrow(dt)][order(-concentration)]
return(concentration)
}
concentration(Groningen[1:100, ], amount, radius = 100)
devtools::document()
devtools::document()
block_around_point <- function(lon_center, lat_center, radius = 200){
north <- 0
east <- 90
south <- 180
west <- 270
return(geosphere::destPoint(c(lon_center, lat_center), c(north, east, south, west), radius))
}
block_around_point1 <- function(lon_center, lat_center, radius = 200){
circumference_earth_in_meters <- 40075000
toRad <- pi / 180
one_lat_in_meters <- circumference_earth_in_meters / 360
#one_lon_in_meters <- circumference_earth_in_meters * cos(lat_center * toRad) / 360
one_lon_in_meters <- cos(lat_center * toRad) * 111.321
south_lat <- lat_center - radius / one_lat_in_meters
north_lat <- lat_center + radius / one_lat_in_meters
west_lon <- lon_center - radius / one_lon_in_meters
east_lon <- lon_center + radius / one_lon_in_meters
return(c(south_lat, north_lat, west_lon, east_lon))
}
block_around_point(6.520386, 53.24007, 200)
block_around_point1(6.520386, 53.24007, 200)
block_around_point1 <- function(lon_center, lat_center, radius = 200){
circumference_earth_in_meters <- 40075000
toRad <- pi / 180
one_lat_in_meters <- circumference_earth_in_meters / 360
one_lon_in_meters <- circumference_earth_in_meters * cos(lat_center * toRad) / 360
#one_lon_in_meters <- cos(lat_center * toRad) * 111.321
south_lat <- lat_center - radius / one_lat_in_meters
north_lat <- lat_center + radius / one_lat_in_meters
west_lon <- lon_center - radius / one_lon_in_meters
east_lon <- lon_center + radius / one_lon_in_meters
return(c(south_lat, north_lat, west_lon, east_lon))
}
block_around_point(6.520386, 53.24007, 200)
block_around_point1(6.520386, 53.24007, 200)
?geosphere::distHaversine()
geosphere::distHaversine(c(6.517390, 53.24007), c(6.517384, 53.24007))
library(spatialrisk)
Rcpp.package.skeleton("spatialrisk", example_code = FALSE,
cpp_files = c("convolve.cpp"))
library(rcpp)
library(Rcpp)
Rcpp.package.skeleton("spatialrisk", example_code = FALSE,
cpp_files = c("convolve.cpp"))
devtools::document()
install.packages("MASS")
install.packages("parallel")
devtools::load_all(".")
library(spatialrisk)
library(spatialrisk)
devtools::load_all(".")
install.packages("rpart")
packrat::disable()
install.packages("packrat")
install.packages("packrat")
install.packages(c("callr", "ggthemes", "keras", "tfruns"))
packrat::status()
packrat::snapshot()
packrat::status()
packrat::restore()
packrat::status()
library(testthat)
install.packages("Rcpp")
packrat::snapshot()
packrat::status()
install.packages("stringr")
packrat::snapshot()
packrat::status()
packrat::restore()
packrat::restore("stringr")
packrat::status()
remove.packages("plyr")
library(plyr)
packrat::init()
packrat::init()
devtools::install_github(repo = "MHaringa/spatialrisk")
